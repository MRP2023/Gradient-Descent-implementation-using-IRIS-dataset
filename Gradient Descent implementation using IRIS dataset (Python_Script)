from ucimlrepo import fetch_ucirepo
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import SGDClassifier
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix


# Fetch dataset
iris = fetch_ucirepo(id=53)

# data (as pandas dataframes) 
X = iris.data.features 
y = iris.data.targets 
  
# metadata 
print(iris.metadata) 
  
# variable information 
print(X,y)

import pandas as pd
df = pd.concat([X,y])

print(y)



# Initialize the label encoder
label_encoder = LabelEncoder()

# Encode the target variable
y_encoded = label_encoder.fit_transform(y['class'])

y_encoded
print(y_encoded)

# from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42)



# Initialize the SGDClassifier with 'log_loss' as the loss function
model = SGDClassifier(loss='log_loss', max_iter=1000, random_state=42)

# Train the model on the training data
model.fit(X_train, y_train)

# Make predictions on the test data
y_pred = model.predict(X_test)

# Evaluate the model's accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)




# Compare y_test and y_pred
comparison_df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})

# Display the comparison DataFrame
print("Comparison between Actual and Predicted:")
print(comparison_df)